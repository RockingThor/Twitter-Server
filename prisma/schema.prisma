// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                     Int            @id @default(autoincrement()) 
  username               String         @unique
  name                   String
  email                  String         @unique
  profileImage           String?        
  backgroundImage        String?        
  hashedPassword         String
  bio                    String         @default("Welcome to my twitter profile.")
  followersId            Int?
  followers              Followers ?     @relation(fields: [followersId], references: [id])
  followingId            Int?
  following              Following    ?  @relation(fields: [followingId], references: [id])
  Tweets                 Tweet[]
  likes                  Int[]           @default([])
  EmailValidation        EmailValidation[]
  resetOTP               String?
  resetTime              DateTime?
  isEmailVerified        Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @default(now())      
}

model EmailValidation{
  id                     Int            @id @default(autoincrement())
  email                  String
  userId                 Int
  user                   User           @relation(fields: [userId], references: [id])
  token                  String         @unique
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @default(now())
}

model Followers{
  id                     Int            @id @default(autoincrement())
  count                  Int
  details                User[]
}

model Following{
  id                     Int            @id @default(autoincrement())
  count                  Int
  details                User[]
}

model Image{
  id                     Int            @id @default(autoincrement())
  url                    String
  tweetId                Int            
  tweet                  Tweet          @relation(fields: [tweetId], references: [id])    
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @default(now())
}



model Tweet{
  id                     Int            @id @default(autoincrement())
  content                String  
  likeId                 Int  ?    
  like                   Like?        
  authorId               Int
  imageUrls              Image[] 
  author                 User           @relation(fields: [authorId], references:[id])       
  video                  Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @default(now())
}

model Like{
  id                     Int             @id @default(autoincrement())
  tweetId                Int             @unique
  tweet                  Tweet           @relation(fields: [tweetId], references: [id])
  count                  Int
  details                Int[]           @default([])
}
